/**
 * 
 */
package sk.seges.acris.binding.rebind.binding;

import java.beans.PropertyDescriptor;
import java.io.PrintWriter;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import sk.seges.acris.binding.client.init.BeanWrapperIntrospector;
import sk.seges.acris.binding.client.wrappers.BeanWrapper;
import sk.seges.acris.core.rebind.AbstractGenerator;
import sk.seges.acris.core.rebind.RebindUtils;

import com.google.gwt.core.ext.GeneratorContext;
import com.google.gwt.core.ext.TreeLogger;
import com.google.gwt.core.ext.UnableToCompleteException;
import com.google.gwt.core.ext.TreeLogger.Type;
import com.google.gwt.core.ext.typeinfo.JClassType;
import com.google.gwt.core.ext.typeinfo.NotFoundException;
import com.google.gwt.core.ext.typeinfo.TypeOracle;
import com.google.gwt.user.rebind.ClassSourceFileComposerFactory;
import com.google.gwt.user.rebind.SourceWriter;

/**
 * Generates introspector filled with bean infos for bean wrapper classes
 * generated by GWT generator. Usually these classes are not present in type
 * oracle in type of generating GWT binding introspector so they need to be
 * added later (here).
 * 
 * @see BeanWrapperIntrospector
 * @author eldzi
 */
public class BeanWrapperIntrospectorGenerator extends AbstractGenerator {
	private static final String BEAN_WRAPPER_FQN = BeanWrapper.class.getCanonicalName();
	private TypeOracle typeOracle;
	private JClassType type;
	private GeneratorContext context;
	private TreeLogger logger;

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.google.gwt.core.ext.Generator#generate(com.google.gwt.core.ext.TreeLogger
	 * , com.google.gwt.core.ext.GeneratorContext, java.lang.String)
	 */
	@Override
	public String doGenerate(TreeLogger logger, GeneratorContext context, String typeClass)
			throws UnableToCompleteException {
		this.logger = logger;
		this.context = context;

		typeOracle = context.getTypeOracle();
		type = typeOracle.findType(typeClass);
		JClassType beanWrapperType = typeOracle.findType(BEAN_WRAPPER_FQN);
		JClassType[] directImplementors = beanWrapperType.getSubtypes();
		List<JClassType> beanList = new ArrayList<JClassType>();
		for (JClassType wrapper : directImplementors) {
			try {
				beanList.add(RebindUtils.getGenericsFromInterfaceType(wrapper, beanWrapperType, 0));
			} catch (NotFoundException e) {
				logger.log(Type.WARN, "Skipping wrapper = " + wrapper
						+ " because cannot get generics argument");
			}

		}

		String packageName = type.getPackage().getName();
		String genTypeName = type.getSimpleSourceName() + "Generated";
		String fqn = packageName + "." + genTypeName;

		SourceWriter sourceWriter = getSourceWriter(packageName, genTypeName, type);
		if (sourceWriter == null) {
			return fqn;
		}

		BeanPropertyDescriptorCreator creator = new BeanPropertyDescriptorCreator();
		creator.write(logger, sourceWriter, beanList);
		sourceWriter.commit(logger);
		return fqn;
	}

	private SourceWriter getSourceWriter(String packageName, String beanClassName, JClassType superType) {
		PrintWriter printWriter = context.tryCreate(logger, packageName, beanClassName);
		if (printWriter == null) {
			return null;
		}
		ClassSourceFileComposerFactory composerFactory = new ClassSourceFileComposerFactory(packageName,
				beanClassName);

		composerFactory.addImport(PropertyDescriptor.class.getName());
		composerFactory.addImport(Method.class.getName());
		// Do not use GwtBeanInfo.class as the BeanInfo interface is NOT fully
		// implemented
		composerFactory.addImport("com.googlecode.gwtx.java.introspection.client.GwtBeanInfo");
		composerFactory.addImport("com.googlecode.gwtx.java.introspection.client.GwtIntrospector");

		return composerFactory.createSourceWriter(context, printWriter);
	}
}
