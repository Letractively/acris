package sk.seges.acris.pap.security.model;
import com.google.gwt.user.client.ui.HasEnabled;
import com.google.gwt.user.client.ui.UIObject;

import javax.annotation.Generated;

import sk.seges.acris.security.client.CheckableSecuredObject;
import sk.seges.acris.security.client.IManageableSecuredObject;
import sk.seges.acris.security.shared.user_management.model.dto.GenericUserDTO;
import sk.seges.acris.security.shared.util.SecurityUtils;

@Generated(value = "sk.seges.acris.pap.security.ManageableSecuredObjectProcessor")
public class PanelWithoutClientSessionManageableSecured extends PanelWithoutClientSession implements IManageableSecuredObject, CheckableSecuredObject {
	 
	private GenericUserDTO user;
	
	private void initializeUser() {
		user = null;
	
		if (getClientSession() != null) {
			user = (GenericUserDTO)getClientSession().getUser();
		}
	
	}
	@Override
	public void check() {
		initializeUser();
		SecurityUtils.handlePermission(user, label1, "TEXT");
	}
	
	@Override
	public void setVisible(UIObject widget, boolean visible) {
		initializeUser();
		if (!visible) {
			SecurityUtils.handleVisibility(widget, false);
			return;
		}
	
		if (label1 == widget) {
			SecurityUtils.handleVisibility(user, widget, "TEXT");
		} else {
			SecurityUtils.handleVisibility(widget, true);
		}
	}
	
	@Override
	public void setEnabled(HasEnabled widget, boolean enabled) {
		initializeUser();
		if (!enabled) {
			SecurityUtils.handleEnabledState(widget, false);
			return;
		}
	
		if (label1 == widget) {
			SecurityUtils.handleEnabledState(user, widget, "TEXT");
		} else {
			SecurityUtils.handleEnabledState(widget, true);
		}
	}
}
