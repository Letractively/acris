package sk.seges.acris.pap.security.model;

import com.google.gwt.user.client.ui.HasEnabled;
import com.google.gwt.user.client.ui.UIObject;

import javax.annotation.Generated;

import sk.seges.acris.security.client.CheckableSecuredObject;
import sk.seges.acris.security.client.IManageableSecuredObject;
import sk.seges.acris.security.shared.session.ClientSession;
import sk.seges.acris.security.shared.user_management.model.dto.GenericUserDTO;
import sk.seges.acris.security.shared.util.SecurityUtils;

@Generated(value = "sk.seges.acris.pap.security.ManageableSecuredObjectProcessor")
public class ManageableSecuredBasicPanel extends BasicPanel implements IManageableSecuredObject, CheckableSecuredObject {

	private void initializeUser() {
		user = null;

		if (getClientSession() != null) {
			user = (GenericUserDTO)getClientSession().getUser();
		}

	}
	private GenericUserDTO user;

	private ClientSession<GenericUserDTO> clientSession;

	public ClientSession<GenericUserDTO> getClientSession() {
		return clientSession;
	}

	public void setClientSession(ClientSession<GenericUserDTO> clientSession) {
		this.clientSession = clientSession;
	}

	@Override
	public void onLoad() {
		super.onLoad();
		check();
	}

	@Override
	public void check() {
		initializeUser();
		SecurityUtils.handlePermission(user, this, "TEXT");
		SecurityUtils.handlePermission(user, label1, "TEXT");
		SecurityUtils.handlePermission(user, label2, "TEXT");
		SecurityUtils.handlePermission(user, textBox, "TEXT");
		SecurityUtils.handlePermission(user, checkBox, "TEXT");
		SecurityUtils.handlePermission(user, radioButton, "TEXT");
	}

	@Override
	public void setVisible(UIObject widget, boolean visible) {
		initializeUser();
		if (!visible) {
			SecurityUtils.handleVisibility(widget, false);
			return;
		}

		if (label1 == widget) {
			SecurityUtils.handleVisibility(user, widget, "TEXT");
		} else if (label2 == widget) {
			SecurityUtils.handleVisibility(user, widget, "TEXT");
		} else if (textBox == widget) {
			SecurityUtils.handleVisibility(user, widget, "TEXT");
		} else if (checkBox == widget) {
			SecurityUtils.handleVisibility(user, widget, "TEXT");
		} else if (radioButton == widget) {
			SecurityUtils.handleVisibility(user, widget, "TEXT");
		} else {
			SecurityUtils.handleVisibility(widget, true);
		}
	}

	@Override
	public void setEnabled(HasEnabled widget, boolean enabled) {
		initializeUser();
		if (!enabled) {
			SecurityUtils.handleEnabledState(widget, false);
			return;
		}

		if (label1 == widget) {
			SecurityUtils.handleEnabledState(user, widget, "TEXT");
		} else if (label2 == widget) {
			SecurityUtils.handleEnabledState(user, widget, "TEXT");
		} else if (textBox == widget) {
			SecurityUtils.handleEnabledState(user, widget, "TEXT");
		} else if (checkBox == widget) {
			SecurityUtils.handleEnabledState(user, widget, "TEXT");
		} else if (radioButton == widget) {
			SecurityUtils.handleEnabledState(user, widget, "TEXT");
		} else {
			SecurityUtils.handleEnabledState(widget, true);
		}
	}

}