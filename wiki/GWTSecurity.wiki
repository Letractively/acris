#summary GWT client and server security implementation
#labels GWTSecurity,SpringSecurity,SessionHandling,Security

= Introduction =

If you are trying to integrate security with your GWT application, you probably know that there is no consistent solution which you can use in your application. There are more issues why is not well solved issue:
 * session handling using RPC calls
 * security integration on client side (spring-security subset classes emulation on GWT module)
 * security integration on server side (handling RPC calls, exception propagation to the client, integration with spring-security, ...)

This is pretty much stuff to be solved in one reusable project and the name of the project is *acris-security*. Yes, If you believe or not, you can easily use client security annotation like this
{{{
@Secured("ROLE_NAME")
public class MyPanel extends LayoutContainer implements ISecuredPanel {

       @Secured("ROLE_NAME")
       //this field will be visible only to authorized users
       protected TextField<String> textField;
...
}
}}}

and server side security annotations on your secured services like this:
{{{
@Secured("USER_MAINTENANCE_ROLE_PERMISSION_CREATE")
//this method can be executed only by authorized users
public void addUser(User user) {
    ...
}
}}}

= Integration steps on client side =
(these steps are assuming that you have separated client&server architecture, if not than integration is little bit earlier, so we are covering the more complex scenario)

 # Add dependency to the acris-security project on your GWT application (into pom.xml)
{{{
<dependency>
	<groupId>sk.seges.acris</groupId>
	<artifactId>acris-security</artifactId>
</dependency>
<dependency>
	<groupId>sk.seges.acris</groupId>
	<artifactId>acris-security</artifactId>
	<classifier>sources</classifier>
</dependency>
}}}
 # Add GWT inherit into your .gwt.xml module file
{{{
<inherits name='sk.seges.acris.Security' />
}}}

= Integration steps on server side =
 # Add session handling filter and listener into your web.xml on your server side
{{{
<filter>
	<filter-name>SessionFilter</filter-name>
	<filter-class>sk.seges.acris.security.server.SessionRemoteServiceFilter</filter-class>
</filter>
<filter-mapping>
	<filter-name>SessionFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>

<listener>
	<listener-class>sk.seges.acris.security.server.SessionHandlerListener</listener-class>
</listener>
}}}
 # Add spring resources into your application context configuration 
{{{
<jee:jndi-lookup id="dataSource" jndi-name="jdbc/acris" resource-ref="true"/>

<import resource="classpath:sk/seges/acris/security/server/security-config.xml" />
<import resource="classpath:sk/seges/acris/security/server/security-acl-config.xml" />
<import resource="classpath:sk/seges/acris/security/server/security-config-object-definition.xml" />
}}}