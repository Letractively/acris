#summary Roadmap

= Important milestones in our life =

|| 0.9.0 || 01.07.2010 || Release Candidate 1 ||
|| 1.0.0 || 20.07.2010 || Release ||
|| [http://code.google.com/p/acris/issues/list?q=label%3AMilestone-1.0.1 1.0.1] || on request || Bugfixing ||
|| [http://code.google.com/p/acris/issues/list?q=label%3AMilestone-1.1.0 1.1.0] || 20.09.2010        ||  Hladný Hadík release ||
|| [http://code.google.com/p/acris/issues/list?q=label%3AMilestone-1.2.0 1.2.0] || TBD        ||  Malý Macík release ||

= Organization of the development =

All bugs, improvements and feature requests are handled by *issue tracker*. You can always click on the link to the release to see the list of issues.

*Use appropriate template* when submitting an issue.

=Release notes 1.0.1=

==Features==
 * bean wrapper reworked. It is not necessary to register beans into introspector and bean wrappers should extends any superclass. This allows you to bind beanwrappers with any UI library like smartGWT or ExtGWT without modifying your domain model (this is also related to a !BeanWrapperAdapterProvider)
 * registering all adapter providers in a one step
 * type safe beans binding using annotations (also nested binding is supported in a completly typesafe way)

==Bug fixes==
 * Fixes in beans binding (more stable code)

==Improvements==
 * Improved list box binding (selection in list change handled properly)
 * Gilead dependency from !UserService removed

=Migration guide from 1.0.0 to 1.0.1=
 * Use typesafe annotations instead of string values

Original code (version 1.0.0)
{{{
@BindingField(Customer.COMPANY + "." + CompanyName.NAME)
protected TextBox tbName = GWT.create(TextBox.class);
}}}

New approach (version 1.0.1)
{{{
@BindingField(CustomerBeanWrapper.COMPANY.NAME)
protected TextBox customerName = GWT.create(TextBox.class);
}}}

 * Use a new apapter providers registration (register all available adapter providers on your classpath in one step)

{{{
import sk.seges.acris.binding.client.init.AdaptersRegistration;
...
AdaptersRegistration registration = GWT.create(AdaptersRegistration.class);
registration.registerAllAdapters();
}}}

 * Register adapter provider for bean wrapper

{{{
import sk.seges.acris.binding.client.providers.wrapper.BeanWrapperAdapterProvider;
...
BeanAdapterFactory.addProvider(new BeanWrapperAdapterProvider());
}}}

This adapter provider replaces introspection from gwtx and provides values from bean using bean wrapper (e.g. reflection for javascript). !BeanWrapperAdapterProvider is also used for validator delegates and for each extension of the !BeanWrapper implementation.

*Why is this used for?*
Previously, the bean wrapper implementation was extending original bean so it was possible to reuse introspection beans from the original type and enable introspection for each super class. In current version, bean wrapper implementation superclass can vary (in order to ensure integration with third party UI libraries) and the introspection bean cannot be delegated anymore.

 * Remove beanManager from !UserService. User service is no more dependend on gilead !RemotePersistentService so beanManager is not necesary

Original user service definition (version 1.0.0):

{{{
<bean name="userService" class="sk.seges.acris.security.server.user_management.service.user.UserService">
	<property name="beanManager" ref="acrisHibernateBeanManager" />
	<property name="authenticationManager" ref="authenticationManager"/>
	<property name="sessionIDGenerator">
		<bean class="sk.seges.acris.security.server.session.HttpSessionIDGenerator" />
	</property>
</bean>
}}}

New user service definition (version 1.0.1):

{{{
<bean name="userService" class="sk.seges.acris.security.server.user_management.service.user.UserService">
	<property name="authenticationManager" ref="authenticationManager"/>
	<property name="sessionIDGenerator">
		<bean class="sk.seges.acris.security.server.session.HttpSessionIDGenerator" />
	</property>
</bean>
}}}