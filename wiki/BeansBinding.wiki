#summary GWT beans binding extension using annotations
#labels Phase-Implementation

= UI widgets binding =

Project acris-binding represents extension to the gwt-beansbinding library and is focused to binding Beans with GWT UI widgets.

Currently we are supporting 3 types of bindings:
  * *One-to-One binding* - the most simplest type used to bind simple value to the widget that can hold only simple value (e.g. TextBox, CheckBox, ...)
Sample:

{{{
@BindingField(User.NAME)
protected TextBox username = GWT.create(TextBox.class);
}}}

  * *One-to-Many binding* - more complex binding type used to bind object with the list of objects represented in ListBox component.

Sample:

{{{
@BindingField(User.ROLE + "." + Role.NAME)
protected ListBox role = GWT.create(ListBox.class);
}}}

In the sample above we bind role from User with ListBox which holds all available roles. We are matching object through name attribute (in ListBox are displayed role names - in String representation). In order to have complete working example you have to also define data loader, which provides data to the ListBox. By default is defined EmptyLoaderCreator which provides no data. You can define your own data loader which can load data from database (using RPC) or load some predefined data.

{{{
@BindingField(User.ROLE + "." + Role.NAME)
@FieldSpecLoader(CustomDataLoader.class)
protected ListBox role = GWT.create(ListBox.class);
}}}

Now CustomDataLoader is called when ListBox is initialized. See FieldSpecLoader for more details.

  * *Many-to-Many binding* - used to specify binding of List of values to ListBox with multiselect functionality. Also should be used for binding to the table, but currently it is only in experimental state

== One To One binding ==

Currently we are supporting binding java primites (and their object alternatives) with:
 ** TextBox (using TextBoxBaseAdapterProvider)
 ** TextArea (using TextBoxBaseAdapterProvider)
 ** DateBox (using DateBoxAdapterProvider)
 ** CheckBox (using CheckBoxAdapterProvider) 

Typical binding scenario is that you want to bind simple bean property (lets say *name* property) with one of the widget listed above.
In our example we are binding name property with textbox.

[http://acris.googlecode.com/svn/wiki/images/bindingsimple.PNG]

Binding mechanism (using GWT generators) will create BeanWrapper which represents middle-point between BindingBean and TextBox. This BeanWrapper implements HasProperty interfaces which is main prerequisite for beans-binding (see <a href="http://code.google.com/p/gwt-beans-binding/">GWT bean binding projects</a>).
BeanWrapper wraps existing bean and ensures that we can provide dynamic accessing of the properties via introspector. All property changes also fires propertyChange listeners. See IObservableObject for further details.

[http://acris.googlecode.com/svn/wiki/images/bindingsimpledetailed.PNG]

== One To Many binding ==

Provides binding property with list of the values represented by:
 ** ListBox (using ListBoxAutoAdapterProvider)

Using on-to-many is very easy, but from implementation point of view, it is little bit more complicated. Preconditions are:
 ** Load all possible values to the list box - we are calling this values *ProxyBeans* and are provided by DataLoader
 ** Indentify binding property in list of Proxy Beans and select it in the widget (e.g. Listbox)
 ** When selection value is changed (another item in listbox is selected) matching proxy value has to be found and selected back to the binding bean

[http://acris.googlecode.com/svn/wiki/images/bindingcomplex.PNG]

[http://acris.googlecode.com/svn/wiki/images/bindingcomplexdetailed.PNG]

=== Data loaders ===

== Adapter providers == 
 ** 