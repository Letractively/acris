#summary Json deserialization to plain java POJO object in GWT using annotations

Firstly, lets talk in a few sentences about the motivation for creating this project and about core AcrIS ideas behind this project. Those, who is motivated enought, can skip this short intro and continue with reading the next chapter.
I'm not going to talk about what [http://www.json.org/ JSON] is but in a short sentence JSON are data in specific format like this:
{{{
{
  'feed': {
    'entry': [
      {'title': {'type': 'text', '$t': 'Some Text'}},
      {'title': {'type': 'text', '$t': 'Some More Text'}}
    ]
  }
}
}}}
Now, if you are GWT developer (and if you are not, then go away :) ) you probably want to deserialize JSON data representation with peace of code like this (I did not try to compile it, but it should be in this way):
Firstly we should define some data structure for holding the data.
{{{
public class Feed {

       public static class Entry {

              public static Class TextConstruct {
                     public String type;
                     public String value;
              }

              public TextConstruct title;
       }

       public List<Entry> entries;
}
}}}

{{{
JSONValue value = JSONParser.parse(jsonString);
if (value.isObject() != null) {
    JSONValue feed = value.isObject().get("feed");

    if (feed == null) {
        //Invalid JSON string
        return null;
    }

    Feed feed = new Feed();

    JSONValue entries = feed.get("entry");

    if (entries.isArray() != null) {
        //Invalid JSON string
        return null;
    }

    feed.entries = new ArrayList<TextConstruct>();
    for (int i = 0; i < entries.isArray().size(); i++) {
         JSONValue titleTextConstruct = entries.isArray().get(i).get("title");
         if (titleTextConstruct == null || titleTextConstruct.isObject() == null) {
             //Invalid JSON string
             return null;
         }
         JSONValue titleValue = titleTextConstruct.isObject().get("$t");

         if (titleValue == null || titleValue.isObject() == null) {
             return null;
         }

         TextConstruct textConstruct = new TextConstruct();
         JSONValue title = titleValue.isObject().get("$t");

         if (title == null || title.isString() == null) {
             return null;
         }
         textConstruct.value = title.isString().stringValue();
         feed.entries.add(textConstruct);
    }

    return result;
}

return null;
}}}

Pretty easy, isn't it ? :) Just, few lines of code which are a quite a lot errorprone and we completly in conflict with DRY & KISS princpiples. Lets try to make little bit easier and more maintenable. In a first step, add JSON annotation into a data structure in order to define mapping fields.

{{{
@JsonObject
public class Feed {

       @JsonObject
       public static class Entry {

              @JsonObject
              public static Class TextConstruct {
                     @Field       public String type;
                     @Field("$t") public String value;
              }

              @Field
              public TextConstruct title;
       }

       @Field("entry"
       public List<Entry> entries;
}
}}}

Now create jsonizer for deserialize json data and fill-up the required data instance. You don't have to create class instances in your own, but you have to keep in mind that your POJOs have to be defaultly instantiated or you have to provide custom POJO instantiator in order to create new class instance.

{{{	
IJsonizer jsonnizer = new JsonizerBuilder().create();
Feed feed = jsonnizer.fromJson(jsonString, "feed", Feed.class);
}}}

You can compare the result of both approaches but compare it with respect that we have really easy data structure but we were able produce much less lines of code with higher maintenability just with adding annotations and using AcrIS jsonizer. Still don't sleep or not gone away? :) So then, continue reading or just play little bit with a <a href="http://acris-gwt.appspot.com/sk.seges.acris.demo.Json/Json.html">JSON demo</a> deployed on appengine.


== POJO annotation ==

GWT jsonize process will take into account only classes with {{{@JSONObject}}} annotation