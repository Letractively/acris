#summary Migration guide from 1.0.0 to 1.0.1
#labels Migration,Releasing

 * sonatype repository definition in settings.xml - for AcrIS artifacts we use Sonatype's OSS maven repository from now on. In the future all releases will be synced to Maven Central.
{{{
	<repository>
		<id>acris-sonatype</id>
		<url>https://oss.sonatype.org/content/groups/staging</url>
		<snapshots>
			<enabled>true</enabled>
		</snapshots>
	</repository>		
}}}

 * Use typesafe annotations instead of string values

Original code (version 1.0.0)
{{{
@BindingField(Customer.COMPANY + "." + CompanyName.NAME)
protected TextBox tbName = GWT.create(TextBox.class);
}}}

New approach (version 1.0.1)
{{{
@BindingField(CustomerBeanWrapper.COMPANY.NAME)
protected TextBox customerName = GWT.create(TextBox.class);
}}}

 * Use a new apapter providers registration (register all available adapter providers on your classpath in one step)

{{{
import sk.seges.acris.binding.client.init.AdaptersRegistration;
...
AdaptersRegistration registration = GWT.create(AdaptersRegistration.class);
registration.registerAllAdapters();
}}}

 * Register adapter provider for bean wrapper

{{{
import sk.seges.acris.binding.client.providers.wrapper.BeanWrapperAdapterProvider;
...
BeanAdapterFactory.addProvider(new BeanWrapperAdapterProvider());
}}}

This adapter provider replaces introspection from gwtx and provides values from bean using bean wrapper (e.g. reflection for javascript). !BeanWrapperAdapterProvider is also used for validator delegates and for each extension of the !BeanWrapper implementation.

*Why is this used for?*
Previously, the bean wrapper implementation was extending original bean so it was possible to reuse introspection beans from the original type and enable introspection for each super class. In current version, bean wrapper implementation superclass can vary (in order to ensure integration with third party UI libraries) and the introspection bean cannot be delegated anymore.

 * Remove beanManager from !UserService. User service is no more dependend on gilead !RemotePersistentService so beanManager is not necesary

Original user service definition (version 1.0.0):

{{{
<bean name="userService" class="sk.seges.acris.security.server.user_management.service.user.UserService">
	<property name="beanManager" ref="acrisHibernateBeanManager" />
	<property name="authenticationManager" ref="authenticationManager"/>
	<property name="sessionIDGenerator">
		<bean class="sk.seges.acris.security.server.session.HttpSessionIDGenerator" />
	</property>
</bean>
}}}

New user service definition (version 1.0.1):

{{{
<bean name="userService" class="sk.seges.acris.security.server.user_management.service.user.UserService">
	<property name="authenticationManager" ref="authenticationManager"/>
	<property name="sessionIDGenerator">
		<bean class="sk.seges.acris.security.server.session.HttpSessionIDGenerator" />
	</property>
</bean>
}}}