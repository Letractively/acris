#summary Automated process of releasing with Maven
#labels Deployment,Releasing

= Prepare maven =

== Step 0 ==

There are two ways:
  * use prepared keystore with Google & Sourceforge certificates -> in this case go to step 3
  * install key(s) manually -> maybe this is the case if you already have keystore for maven

== Step 1 ==

Download Google certificate into your PC. Follow the guide below. Name the certificate file it e.g. *google.pem*.

[http://acris.googlecode.com/svn/wiki/images/certificateExportGuide.png]

== Step 2 ==

Following command will import the certificate and asks for a password used to authorize the access to the keystore (and for our example we will use: *keystorePassword*):

    * {{{keytool -v -alias mavenGoogle -import -file google.pem -keystore trust.jceks -storetype jceks}}}

This will create *trust.jceks* on your filesystem. Place it whereever you can find it because it will be needed by Maven!

Delete the certificate file because it will not be needed anymore. The authorization process will be executed against your keystore.

We will follow with 3rd step - setting MAVEN_OPTS up. There are several ways how to do it but these three parameters of Java VM needs to be in place:

    * -Djavax.net.ssl.trustStore=/path/to/keystore/trust.jceks 
    * -Djavax.net.ssl.trustStorePassword=keystorePassword
    * -Djavax.net.ssl.trustStoreType=jceks

== Step 3 ==

How to setup MAVEN_OPTS:
    * in case of using prepared keystore use path to acris-os-parent/acris.jceks file
    * for the environment of the operating system (the preferred way):
      * in *Windows*: Start -> Control panel -> System -> Environment variables, put new key MAVEN_OPTS following values -Djavax.net.ssl.trustStore=c:\path\to\keystore\acris.jceks -Djavax.net.ssl.trustStorePassword=password -Djavax.net.ssl.trustStoreType=jceks
      * in *Linux*: in your home directory create file *.mavenrc* and put htere following value MAVEN_OPTS="-Djavax.net.ssl.trustStore=/path/to/keystore/acris.jceks -Djavax.net.ssl.trustStorePassword=keystorePassword -Djavax.net.ssl.trustStoreType=jceks

    * or you can set environment variable for specific case/terminal/environment:
      * in Windows console set MAVEN_OPTS=-Djavax.net.ssl.trustStore=c:\path\to\keystore\acris.jceks -Djavax.net.ssl.trustStorePassword=keystorePassword -Djavax.net.ssl.trustStoreType=jceks
      * almost the same in Linux using export MAVEN_OPTS="-Djavax.net.ssl.trustStore=/path/to/keystore/acris.jceks -Djavax.net.ssl.trustStorePassword=keystorePassword -Djavax.net.ssl.trustStoreType=jceks"
      * or using direct maven command with variable in Linux: MAVEN_OPTS="-Djavax.net.ssl.trustStore=/path/to/keystore/acris.jceks -Djavax.net.ssl.trustStorePassword=keystorePassword -Djavax.net.ssl.trustStoreType=jceks" mvn compile

== Step 4 ==

Final step is to setup authentification information for SVN access. Open your *settings.xml* in ".m2" directory and enter following information to the *servers* section:

{{{
<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">

	<servers>
		<server>
			<id>acris-snapshots-repo</id>
			<username>darth</username>
			<password>tater</password>
		</server>
		<server>
			<id>acris-releases-repo</id>
			<username>darth</username>
			<password>tater</password>
		</server>
	</servers>

</settings>
}}}

The password is generated by google and you can find it in "Source" tab and clicking the "google password" link.

= Snapshots deployment =

Execute *mvn deploy* optionally with -Dmaven.test.skip in project you want to deploy to snapshots repository. Execute it on parent project if you want to deploy all projects.

= Release =

== sesam-os-base-parent release ==

  * prepare directory structure
    * use script in https://acris.googlecode.com/svn/releases-repository/sk/seges/sesam/create_base-parent_release_structure.sh
  * {{{mvn release:prepare -DautoVersionSubmodules=true}}}
  * {{{mvn release:perform}}}
  * {{{mvn release:clean}}}

== sesam-os ==

  * go to trunk directory, build pom.xml should be there
  * prepare directory structure
    * use script in https://acris.googlecode.com/svn/releases-repository/sk/seges/sesam/create_release_structure.sh
  * {{{mvn release:prepare -DautoVersionSubmodules=true}}}
  * {{{mvn release:perform}}}
  * {{{mvn release:clean}}}

== corpis-os ==

  * similar steps as sesam-os

== acris-os ==

  * similar steps as sesam-os